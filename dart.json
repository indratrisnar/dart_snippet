{
  "Regular Test": {
    "prefix": "aaatest",
    "body": [
      "test(",
      "  '$0',",
      "  () async {",
      "    // arrange",
      "",
      "    // act",
      "",
      "    // assert",
      "  },",
      ");"
    ]
  },
  "Widget Test": {
    "prefix": "aaatwidget",
    "body": [
      "testWidgets(",
      "  '$0',",
      "   (tester) async {",
      "   // arrange",
      "",
      "   // act",
      "",
      "   // assert",
      "   },",
      ");"
    ]
  },
  "Common Container": {
    "prefix": "common_container",
    "body": [
      "Container(",
      "  width: 50,",
      "  height: 50,",
      "  decoration: BoxDecoration(",
      "    borderRadius: BorderRadius.circular(0),",
      "    color: Color(0xff),",
      "  ),",
      ")$0"
    ]
  },
  "Common Text": {
    "prefix": "common_text",
    "body": [
      "Text(",
      "  '$0',",
      "  style: TextStyle(",
      "    fontWeight: FontWeight.w400,",
      "    fontSize: 14,",
      "    color: Colors.black45,",
      "  ),",
      "),"
    ]
  },
  "Common Lorem Ipsum": {
    "prefix": "common_lorem_ipsum",
    "body": "\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\""
  },
  "Common Gradient": {
    "prefix": "common_gradient",
    "body": [
      "LinearGradient(",
      "  begin: Alignment.topCenter,",
      "  end: Alignment.bottomCenter,",
      "  colors: [",
      "    Color(0xff$0),",
      "    Color(0xff),",
      "  ],",
      "),"
    ]
  },
  "Common Text Style": {
    "prefix": "common_text_style",
    "body": [
      "TextStyle(",
      "  fontWeight: FontWeight.w500,",
      "  fontSize: 16,",
      "  color: Colors.black45,",
      ")$0"
    ]
  },
  "Common Box Shadow": {
    "prefix": "common_box_shadow",
    "body": [
      "BoxShadow(",
      "  offset: Offset(0$0, 0),",
      "  blurRadius: 6,",
      "  color: Color(0xff000000),",
      "),"
    ]
  },
  "Common Text Field": {
    "prefix": "common_text_field",
    "body": [
      "TextField(",
      "  controller: controller$0,",
      "  style: const TextStyle(",
      "    fontWeight: FontWeight.w500,",
      "    fontSize: 16,",
      "    color: Color(0xff000000),",
      "  ),",
      "  decoration: const InputDecoration(",
      "    border: InputBorder.none,",
      "    hintText: '',",
      "    hintStyle: TextStyle(",
      "      fontWeight: FontWeight.w500,",
      "      fontSize: 16,",
      "      color: Color(0xff000000),",
      "    ),",
      "    contentPadding: EdgeInsets.all(0),",
      "    isDense: true,",
      "  ),",
      "),"
    ]
  },
  "Common Icon": {
    "prefix": "common_icon",
    "body": [
      "Icon(",
      "  Icons.add,",
      "  size: 24,",
      "  color: Colors.grey,",
      ")"
    ]
  },
  "Common Image Icon": {
    "prefix": "common_image_icon",
    "body": [
      "ImageIcon(",
      "  AssetImage('$0'),",
      "  size: 24,",
      "  color: Color(0xff000000),",
      "),"
    ]
  },
  "Common Loading Circle": {
    "prefix": "common_loading_circle",
    "body": "const Center(child: CircularProgressIndicator())"
  },
  "Common Text Failed": {
    "prefix": "common_text_failed",
    "body": "Center(child: Text($0))"
  },
  "Common Column": {
    "prefix": "common_column",
    "body": [
      "Column(",
      "  crossAxisAlignment: CrossAxisAlignment.start,",
      "  children: [",
      "    $0",
      "  ],",
      ")"
    ]
  },
  "Common Row": {
    "prefix": "common_row",
    "body": [
      "Row(",
      "  crossAxisAlignment: CrossAxisAlignment.center,",
      "  children: [",
      "    $0",
      "  ],",
      ")"
    ]
  },
  "Common Image.asset": {
    "prefix": "common_image_asset",
    "body": [
      "Image.asset(",
      "  '$0',",
      "  width: 50,",
      "  height: 50,",
      "  fit: BoxFit.cover,",
      "),"
    ]
  },
  "Common Image.network": {
    "prefix": "common_image_network",
    "body": [
      "Image.network(",
      "  '$0',",
      "  width: 50,",
      "  height: 50,",
      "  fit: BoxFit.cover,",
      "),"
    ]
  },
  "Common Image.file": {
    "prefix": "common_image_file",
    "body": [
      "Image.file(",
      "  '$0',",
      "  width: 50,",
      "  height: 50,",
      "  fit: BoxFit.cover,",
      "),"
    ]
  },
  "BLoC: Reset Emit": {
    "prefix": "bloc_reset",
    "body": "reset() => emit($0);"
  },
  "BLoC: Set Emit": {
    "prefix": "bloc_set",
    "body": "set($0 data) => emit(data);"
  },
  "BLoC: State Structure": {
    "prefix": "bloc_state_structure",
    "body": [
      "@immutable",
      "sealed class $0State {",
      "  const $0State();",
      "}",
      "",
      "final class $0Initial extends $0State {}",
      "",
      "final class $0Loading extends $0State {}",
      "",
      "final class $0Failed extends $0State {",
      "  const $0Failed({required this.message});",
      "  final String message;",
      "}",
      "",
      "final class $0Success extends $0State {",
      "  const $0Success({required this.message});",
      "  final String message;",
      "}"
    ]
  },
  "BLoC: State Structure & Equatable": {
    "prefix": "bloc_state_structure_equatable",
    "body": [
      "@immutable",
      "sealed class $0State extends Equatable {",
      "  const $0State();",
      "",
      "  @override",
      "  List<Object> get props => [];",
      "}",
      "",
      "final class $0Initial extends $0State {}",
      "",
      "final class $0Loading extends $0State {}",
      "",
      "final class $0Failed extends $0State {",
      "  final Failure failure;",
      "",
      "  const $0Failed({required this.failure});",
      "",
      "  @override",
      "  List<Object> get props => [failure];",
      "}",
      "",
      "final class $0Success extends $0State {}"
    ]
  },
  "BLoC: Check State Builder": {
    "prefix": "bloc_check_state_builder",
    "body": [
      "if (state is $0Loading) {",
      "  return const Center(child: CircularProgressIndicator());",
      "}",
      "if (state is $0Failed) {",
      "  return Center(child: Text(state.message));",
      "}",
      "if (state is $0Success) {",
      "  return const Text('success');",
      "}",
      "return const SizedBox();"
    ]
  },
  "BLoC: Check State for execute": {
    "prefix": "bloc_check_state",
    "body": [
      "if (state is $0Failed) {",
      "  DInfo.toastError(state.message);",
      "  return;",
      "}",
      "if (state is $0Success) {",
      "  DInfo.toastSuccess(state.message);",
      "  return;",
      "}"
    ]
  },
  "GetX Controller & State Class": {
    "prefix": "getxc",
    "body": [
      "import 'package:get/get.dart';",
      "",
      "class $1Controller extends GetxController {",
      "  final _state = $1State().obs;",
      "  $1State get state => _state.value;",
      "  set state($1State n) => _state.value = n;",
      "",
      "  fetch() {}",
      "",
      "  execute() {}",
      "",
      "  static delete() {",
      "    Get.delete<$1Controller>(force: true);",
      "  }",
      "}",
      "",
      "class $1State {}"
    ]
  },
  "GetX Controller Execute": {
    "prefix": "getxc_execute",
    "body": [
      "import 'package:get/get.dart';",
      "",
      "class $1Controller extends GetxController {",
      "  final _state = $1State().obs;",
      "  $1State get state => _state.value;",
      "  set state($1State n) => _state.value = n;",
      "",
      "  Future<$1State> execute() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "",
      "    final (success, message) = await $1DataSource.add();",
      "",
      "    state = state.copyWith(",
      "      requestStatus: success ? RequestStatus.success : RequestStatus.failed,",
      "      message: message,",
      "    );",
      "",
      "    return state;",
      "  }",
      "",
      "  static delete() {",
      "    Get.delete<$1Controller>(force: true);",
      "  }",
      "}",
      "",
      "class $1State {",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "  });",
      "",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "    );",
      "  }",
      "}"
    ]
  },
  "GetX Controller Fetch List": {
    "prefix": "getxc_fetch_list",
    "body": [
      "import 'package:get/get.dart';",
      "",
      "class $1Controller extends GetxController {",
      "  final _state = $1State().obs;",
      "  $1State get state => _state.value;",
      "  set state($1State n) => _state.value = n;",
      "",
      "  Future<void> fetch() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "",
      "    final (success, message, list) = await $1DataSource.get();",
      "",
      "    state = state.copyWith(",
      "      requestStatus: success ? RequestStatus.success : RequestStatus.failed,",
      "      message: message,",
      "      list: list,",
      "    );",
      "  }",
      "",
      "  static delete() {",
      "    Get.delete<$1Controller>(force: true);",
      "  }",
      "}",
      "",
      "class $1State {",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  final List<$1Model>? list;",
      "",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "    this.list,",
      "  });",
      "",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "    List<$1Model>? list,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "      list: list ?? this.list,",
      "    );",
      "  }",
      "}"
    ]
  },
  "GetX Controller Fetch Single": {
    "prefix": "getxc_fetch_single",
    "body": [
      "import 'package:get/get.dart';",
      "",
      "class $1Controller extends GetxController {",
      "  final _state = $1State().obs;",
      "  $1State get state => _state.value;",
      "  set state($1State n) => _state.value = n;",
      "",
      "  Future<void> fetch() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "",
      "    final (success, message, data) = await $1DataSource.get();",
      "",
      "    state = state.copyWith(",
      "      requestStatus: success ? RequestStatus.success : RequestStatus.failed,",
      "      message: message,",
      "      data: data,",
      "    );",
      "  }",
      "",
      "  static delete() {",
      "    Get.delete<$1Controller>(force: true);",
      "  }",
      "}",
      "",
      "class $1State {",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  final $1Model? data;",
      "",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "    this.data,",
      "  });",
      "",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "    $1Model? data,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "      data: data ?? this.data,",
      "    );",
      "  }",
      "}"
    ]
  },
  "GetX: Obx State List": {
    "prefix": "obx_state_list",
    "body": [
      "Obx(() {",
      "  final state = $0Controller.state;",
      "  final requestStatus = state.requestStatus;",
      "  if (requestStatus == RequestStatus.init) {",
      "    return const SizedBox();",
      "  }",
      "  if (requestStatus == RequestStatus.loading) {",
      "    return const Center(child: CircularProgressIndicator.adaptive());",
      "  }",
      "  if (requestStatus == RequestStatus.failed) {",
      "    final String message = state.message;",
      "    return Center(child: Text(message));",
      "  }",
      "  final list = state.list!;",
      "  if (list.isEmpty) {",
      "    return const Center(child: Text('No Data Yet'));",
      "  }",
      "  return ListView.builder(",
      "    itemCount: list.length,",
      "    itemBuilder: (context, index) {",
      "      final item = list[index];",
      "      return buildItem();",
      "    },",
      "  );",
      "}),"
    ]
  },
  "GetX: Check State for execute": {
    "prefix": "getx_check_state",
    "body": [
      "if (state.requestStatus == RequestStatus.failed) {",
      "  DInfo.toastError(state.message);",
      "  return;",
      "}",
      "if (state.requestStatus == RequestStatus.success) {",
      "  DInfo.toastSuccess(state.message);",
      "  return;",
      "}"
    ]
  },
  "GetX: Check State Builder": {
    "prefix": "getx_check_state_builder",
    "body": [
      "final state = $1Controller.state;",
      "if (state.requestStatus == RequestStatus.init) {",
      "  return const SizedBox();",
      "}",
      "if (state.requestStatus == RequestStatus.loading) {",
      "  return const Center(child: CircularProgressIndicator());",
      "}",
      "if (state.requestStatus == RequestStatus.failed) {",
      "  return Center(child: Text(state.message));",
      "}",
      "return const Text('Success');"
    ]
  },
  "Route Name": {
    "prefix": "rn",
    "body": "static const routeName = '/$0';"
  },
  "Navigator Pop": {
    "prefix": "n_pop",
    "body": "Navigator.pop(context);"
  },
  "ListView Vertical": {
    "prefix": "common_list",
    "body": [
      "ListView.builder(",
      "  itemCount: $1.length,",
      "  padding: const EdgeInsets.symmetric(horizontal: 16),",
      "  physics: const BouncingScrollPhysics(),",
      "  itemBuilder: (context, index) {",
      "    final item = $1[index];",
      "    return ;",
      "  },",
      ")"
    ]
  },
  "ListView Vertical No Scroll": {
    "prefix": "common_list_no_scroll",
    "body": [
      "ListView.builder(",
      "  itemCount: $1.length,",
      "  padding: const EdgeInsets.symmetric(horizontal: 16),",
      "  shrinkWrap: true,",
      "  physics: const NeverScrollableScrollPhysics(),",
      "  itemBuilder: (context, index) {",
      "    final item = $1[index];",
      "    return ;",
      "  },",
      ")"
    ]
  },
  "ListView Horizontal": {
    "prefix": "common_list_horiz",
    "body": [
      "SizedBox(",
      "  height: 150,",
      "  child: ListView.builder(",
      "    itemCount: $1.length,",
      "    scrollDirection: Axis.horizontal,",
      "    physics: const BouncingScrollPhysics(),",
      "    itemBuilder: (context, index) {",
      "      final item = $1[index];",
      "      return ;",
      "    },",
      "  ),",
      ")"
    ]
  },
  "ListView Horizontal No Scroll": {
    "prefix": "common_list_horiz_no_scroll",
    "body": [
      "SizedBox(",
      "  height: 150,",
      "  child: ListView.builder(",
      "    itemCount: $1.length,",
      "    scrollDirection: Axis.horizontal,",
      "    shrinkWrap: true,",
      "    physics: const NeverScrollableScrollPhysics(),",
      "    itemBuilder: (context, index) {",
      "      final item = $1[index];",
      "      return ;",
      "    },",
      "  ),",
      ")"
    ]
  },
  "GridView Vertical": {
    "prefix": "common_grid",
    "body": [
      "GridView.builder(",
      "  itemCount: $1.length,",
      "  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "    crossAxisCount: 2,",
      "    mainAxisSpacing: 16,",
      "    crossAxisSpacing: 16,",
      "    childAspectRatio: 1,",
      "  ),",
      "  padding: const EdgeInsets.symmetric(horizontal: 16),",
      "  physics: const BouncingScrollPhysics(),",
      "  itemBuilder: (context, index) {",
      "    final item = $1[index];",
      "    return ;",
      "  },",
      "),"
    ]
  },
  "GridView Vertical No Scroll": {
    "prefix": "common_grid_no_scroll",
    "body": [
      "GridView.builder(",
      "  itemCount: $1.length,",
      "  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "    crossAxisCount: 2,",
      "    mainAxisSpacing: 16,",
      "    crossAxisSpacing: 16,",
      "    childAspectRatio: 1,",
      "  ),",
      "  padding: const EdgeInsets.symmetric(horizontal: 16),",
      "  shrinkWrap: true,",
      "  physics: const NeverScrollableScrollPhysics(),",
      "  itemBuilder: (context, index) {",
      "    final item = $1[index];",
      "    return ;",
      "  },",
      "),"
    ]
  },
  "GridView Horizontal": {
    "prefix": "common_grid_horiz",
    "body": [
      "SizedBox(",
      "  height: 300,",
      "  child: GridView.builder(",
      "    itemCount: $1.length,",
      "    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "      crossAxisCount: 2,",
      "      mainAxisSpacing: 16,",
      "      crossAxisSpacing: 16,",
      "      childAspectRatio: 1,",
      "    ),",
      "    scrollDirection: Axis.horizontal,",
      "    physics: const BouncingScrollPhysics(),",
      "    itemBuilder: (context, index) {",
      "      final item = $1[index];",
      "      return ;",
      "    },",
      "  ),",
      ")"
    ]
  },
  "GridView Horizontal No Scroll": {
    "prefix": "common_grid_horiz_no_scroll",
    "body": [
      "SizedBox(",
      "  height: 300,",
      "  child: GridView.builder(",
      "    itemCount: $1.length,",
      "    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "      crossAxisCount: 2,",
      "      mainAxisSpacing: 16,",
      "      crossAxisSpacing: 16,",
      "      childAspectRatio: 1,",
      "    ),",
      "    scrollDirection: Axis.horizontal,",
      "    shrinkWrap: true,",
      "    physics: const NeverScrollableScrollPhysics(),",
      "    itemBuilder: (context, index) {",
      "      final item = $1[index];",
      "      return ;",
      "    },",
      "  ),",
      ")"
    ]
  },
  "Input Validation Is Empty": {
    "prefix": "common_input_validation_empty",
    "body": [
      "final $1 = $1Controller.text;",
      "if ($1 == '') {",
      "  ScaffoldMessenger.of(context).showSnackBar(",
      "    const SnackBar(",
      "      content: Text(",
      "        '$1 must be filled',",
      "        style: TextStyle(color: Colors.white),",
      "      ),",
      "      duration: Duration(seconds: 2),",
      "      backgroundColor: Colors.red,",
      "    ),",
      "  );",
      "  return;",
      "}"
    ]
  },
  "Input Validation Is Empty & DInfo": {
    "prefix": "common_input_validation_empty_dinfo",
    "body": [
      "final $1 = $1Controller.text;",
      "if ($1 == '') {",
      "  DInfo.toastError('$1 must be filled');",
      "  return;",
      "}"
    ]
  },
  "Provider: Basic": {
    "prefix": "provider_basic",
    "body": [
      "import 'package:flutter/foundation.dart';",
      "",
      "class $0Provider extends ChangeNotifier {",
      "  int _state = 0;",
      "  int get state => _state;",
      "  set state(int n) {",
      "    _state = n;",
      "    notifyListeners();",
      "  }",
      "}"
    ]
  },
  "Provider: Execute": {
    "prefix": "provider_execute",
    "body": [
      "import 'package:flutter/foundation.dart';",
      "",
      "class $1Provider extends ChangeNotifier {",
      "  $1State _state = $1State();",
      "  $1State get state => _state;",
      "  set state($1State n) {",
      "    _state = n;",
      "    notifyListeners();",
      "  }",
      "",
      "  Future<$1State> execute() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "",
      "    final (success, message) = await $1DataSource.execute();",
      "",
      "    state = state.copyWith(",
      "      requestStatus: success ? RequestStatus.success : RequestStatus.failed,",
      "      message: message,",
      "    );",
      "",
      "    return state;",
      "  }",
      "}",
      "",
      "class $1State {",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "  });",
      "  ",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  ",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "    );",
      "  }",
      "}"
    ]
  },
  "Provider: Fetch List": {
    "prefix": "provider_fetch_list",
    "body": [
      "import 'package:flutter/foundation.dart';",
      "",
      "class $1Provider extends ChangeNotifier {",
      "  $1State _state = $1State();",
      "  $1State get state => _state;",
      "  set state($1State n) {",
      "    _state = n;",
      "    notifyListeners();",
      "  }",
      "  ",
      "  Future<void> fetch() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "    ",
      "    final (success, message, list) = await $1DataSource.fetch();",
      "    ",
      "    state = state.copyWith(",
      "      requestStatus: success ? RequestStatus.success : RequestStatus.failed,",
      "      message: message,",
      "      list: list ?? [],",
      "    );",
      "  }",
      "}",
      "",
      "class $1State {",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "    this.list = const [],",
      "  });",
      "  ",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  final List<$1Model> list;",
      "  ",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "    List<$1Model>? list,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "      list: list ?? this.list,",
      "    );",
      "  }",
      "}"
    ]
  },
  "Provider: Fetch Single": {
    "prefix": "provider_fetch_single",
    "body": [
      "import 'package:flutter/foundation.dart';",
      "",
      "class $1Provider extends ChangeNotifier {",
      "  $1State _state = $1State();",
      "  $1State get state => _state;",
      "  set state($1State n) {",
      "    _state = n;",
      "    notifyListeners();",
      "  }",
      "  ",
      "  Future<void> fetch() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "    ",
      "    final (success, message, data) = await $1DataSource.fetch();",
      "    ",
      "    state = state.copyWith(",
      "      requestStatus: success ? RequestStatus.success : RequestStatus.failed,",
      "      message: message,",
      "      data: data,",
      "    );",
      "  }",
      "}",
      "",
      "class $1State {",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "    this.data,",
      "  });",
      "  ",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  final Map? data;",
      "  ",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "    Map? data,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "      data: data ?? this.data,",
      "    );",
      "  }",
      "}"
    ]
  },
  "Riverpod: Basic Structure": {
    "prefix": "riverpod_state_structure",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "final nameProvider = NotifierProvider<$1Notifier, int>(",
      "  $1Notifier.new,",
      ");",
      "",
      "class $1Notifier extends Notifier<int> {",
      "  @override",
      "  int build() => 0;",
      "",
      "  void update(int n) => state = n;",
      "}"
    ]
  },
  "Riverpod: Execute": {
    "prefix": "riverpod_execute",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "final nameProvider = NotifierProvider<$1Notifier, $1State>(",
      "  $1Notifier.new,",
      ");",
      "",
      "class $1Notifier extends Notifier<$1State> {",
      "  @override",
      "  $1State build() => $1State();",
      "",
      "  Future<$1State> execute() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "    ",
      "    final (success, message) = await dataSource.fun();",
      "    ",
      "    state = state.copyWith(",
      "      requestStatus: success ? RequestStatus.success : RequestStatus.failed,",
      "      message: message,",
      "    );",
      "    ",
      "    return state;",
      "  }",
      "}",
      "",
      "class $1State {",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "  });",
      "  ",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  ",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "    );",
      "  }",
      "}"
    ]
  },
  "Riverpod: Fetch Single": {
    "prefix": "riverpod_fetch_single",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "final nameProvider = NotifierProvider<$1Notifier, $1State>(",
      "  $1Notifier.new,",
      ");",
      "",
      "class $1Notifier extends Notifier<$1State> {",
      "  @override",
      "  $1State build() => $1State();",
      "",
      "  Future<void> fetch() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "    ",
      "    final (success, message, data) = await dataSource.fun();",
      "    ",
      "    if (!success) {",
      "      state = state.copyWith(",
      "        requestStatus: RequestStatus.failed,",
      "        message: message,",
      "      );",
      "      return;",
      "    }",
      "",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.success,",
      "      message: message,",
      "      data: data,",
      "    );",
      "  }",
      "}",
      "",
      "class $1State {",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "    this.data,",
      "  });",
      "  ",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  final $1Model? data;",
      "  ",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "    $1Model? data,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "      data: data ?? this.data,",
      "    );",
      "  }",
      "}"
    ]
  },
  "Riverpod: Fetch List": {
    "prefix": "riverpod_fetch_list",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "final nameProvider = NotifierProvider<$1Notifier, $1State>(",
      "  $1Notifier.new,",
      ");",
      "",
      "class $1Notifier extends Notifier<$1State> {",
      "  @override",
      "  $1State build() => $1State();",
      "",
      "  Future<void> fetch() async {",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.loading,",
      "    );",
      "    ",
      "    final (success, message, list) = await dataSource.fun();",
      "    ",
      "    if (!success) {",
      "      state = state.copyWith(",
      "        requestStatus: RequestStatus.failed,",
      "        message: message,",
      "      );",
      "      return;",
      "    }",
      "",
      "    state = state.copyWith(",
      "      requestStatus: RequestStatus.success,",
      "      message: message,",
      "      list: list,",
      "    );",
      "  }",
      "}",
      "",
      "class $1State {",
      "  $1State({",
      "    this.requestStatus = RequestStatus.init,",
      "    this.message = '',",
      "    this.list,",
      "  });",
      "  ",
      "  final RequestStatus requestStatus;",
      "  final String message;",
      "  final List<$1Model>? list;",
      "  ",
      "  $1State copyWith({",
      "    RequestStatus? requestStatus,",
      "    String? message,",
      "    List<$1Model>? list,",
      "  }) {",
      "    return $1State(",
      "      requestStatus: requestStatus ?? this.requestStatus,",
      "      message: message ?? this.message,",
      "      list: list ?? this.list,",
      "    );",
      "  }",
      "}"
    ]
  }
}